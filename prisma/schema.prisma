// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum ClientStatus {
  DISCONNECTED
  CONNECTED
  SCANNING
}

enum MessageStatus {
  SCHEDULED
  SENT
  FAILED
}

enum ContactType {
  PERSONAL
  GROUP
  COMMUNITY
}

enum direction {
  IN
  OUT
}

model WhatsAppClient {
  id            Int          @id @default(autoincrement())
  name          String
  description   String
  signatureKey  String       @default("Key-Author") // kunci rahasia untuk verifikasi pesan
  secretKey     String
  sessionFolder String
  status        ClientStatus @default(SCANNING)
  waName        String? // nama WhatsApp client (biasanya nama pengguna)
  phoneNumber   String? // nomor telepon WhatsApp yang digunakan
  waId          String? // ID WhatsApp client (opsional, bisa diisi setelah login)
  profilePicUrl String? // URL foto profil WhatsApp client

  contacts    Contact[]
  messages    Message[]
  autoReplies autoReply?
  webhooks    Webhook[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id       Int            @id @default(autoincrement())
  clientId Int
  client   WhatsAppClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  waId          String // ID WhatsApp kontak
  profilePicUrl String? // URL foto profil kontak
  name          String
  phone         String // nomor telepon kontak
  type          ContactType // jenis kontak: PERSONAL, GROUP, COMMUNITY

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id       Int            @id @default(autoincrement())
  clientId Int
  client   WhatsAppClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  to          String
  body        String
  direction   direction     @default(IN) // arah pesan: IN (masuk) atau OUT (keluar)
  status      MessageStatus @default(SENT) // status pesan
  scheduledAt DateTime? // untuk pesan terjadwal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model autoReply {
  id       Int            @id @default(autoincrement())
  clientId Int            @unique
  client   WhatsAppClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  isReplyPersonal       Boolean @default(false)
  isReplyGroup          Boolean @default(false)
  isReplyTag            Boolean @default(false)
  replyTemplatePersonal String? // template balasan untuk personal chat
  replyTemplateGroup    String? // template balasan untuk grup (tanpa tag)
  replyTemplateTag      String? // template balasan ketika bot ditag di grup

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Webhook {
  id       Int            @id @default(autoincrement())
  clientId Int
  client   WhatsAppClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  name            String // Nama webhook untuk identifikasi
  description     String? // Deskripsi webhook
  url             String // URL endpoint yang menerima event ini
  signatureHeader String  @default("X-Signature")
  secretKey       String // Kunci rahasia untuk verifikasi event
  outputFormat    String  @default("$body.output") // Format output yang diterima (json/xml)

  isPersonal Boolean @default(false) // Apakah webhook ini untuk pesan personal
  isGroup    Boolean @default(false) // Apakah webhook ini untuk pesan grup
  isTag      Boolean @default(false) // Apakah webhook ini untuk pesan yang ditag

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
